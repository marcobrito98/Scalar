# Schedule definitions for thorn ScalarEvolve

if (CCTK_EQUALS (evolution_method, "ScalarEvolve")) {

  STORAGE: rhs_phi rhs_Kphi
  STORAGE: hmetric conf_fac_chi trk

  # compute fluxes
    if( compute_fluxes )
        {
            STORAGE: densities_SF[3]
        }

  SCHEDULE Scalar_zero_densities IN SetTmunu
  {
    LANG: Fortran
    WRITES: ScalarEvolve::rhoSF_gf(everywhere)
    WRITES: ScalarEvolve::jrSF_gf(everywhere)
    WRITES: ScalarEvolve::SrrSF_gf(everywhere)
  } "Initialise the SF densities to zero"

  schedule Scalar_Init at CCTK_PARAMCHECK
  {
    LANG: C
    OPTIONS: global
  } "Initialise flags and boundary condition"

  schedule Scalar_InitSymBound at BASEGRID
  {
    LANG: Fortran
    OPTIONS: META
  } "Schedule symmetries"

  schedule Scalar_zero_rhs at BASEGRID after Scalar_InitSymBound
  {
    LANG: Fortran
  } "set all rhs functions to zero to prevent spurious nans"

  schedule Scalar_RegisterVars in MoL_Register
  {
    LANG: C
    OPTIONS: META
  } "Register variables for MoL"

  schedule Scalar_ord4_calc_rhs IN MoL_CalcRHS AS Scalar_CalcRHS
  {
    LANG: Fortran
  } "MoL RHS calculation for Scalar variables"

  if (!z_is_radial) {
    schedule Scalar_ord4_calc_rhs_bdry in MoL_CalcRHS as Scalar_CalcRHS_Bdry \
             after Scalar_CalcRHS
    {
      LANG: Fortran
    } "MoL boundary RHS calculation for Scalar variables"
  }

  if (z_is_radial) {
    schedule Scalar_ord4_calc_rhs_bdry_sph in MoL_RHSBoundaries as Scalar_CalcRHS_Bdry_Sph
    {
      LANG: Fortran
    } "MoL boundary RHS calculation for Scalar variables for the multipatch system"
  }

  schedule Scalar_Boundaries in MoL_PostStep
  {
    LANG: Fortran
    OPTIONS: LEVEL
    SYNC: phi
    SYNC: Kphi
  } "MoL boundary enforcement for Scalar variables"

  schedule GROUP ApplyBCs as Scalar_ApplyBCs in MoL_PostStep after Scalar_Boundaries
  {
  } "Apply boundary conditions"


  schedule Scalar_calc_Tmunu in AddToTmunu as Scalar_AddToTmunu
  {
    LANG: Fortran
  } "Compute the energy-momentum tensor"

}
